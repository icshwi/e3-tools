#!/bin/bash
#
#  Copyright (c) 2018 - Present Jeong Han Lee
#  Copyright (c) 2018 - Present European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
#
#   author  : Jeong Han Lee
#   email   : jeonghan.lee@gmail.com
#   date    : Thursday, September 20 12:22:07 CEST 2018
#   version : 0.1.0


EXIST=1
NON_EXIST=0

function pushd { builtin pushd "$@" > /dev/null; }
function popd  { builtin popd  "$@" > /dev/null; }



function die
{
    error=${1:-1}
    ## exits with 1 if error number not given
    shift
    [ -n "$*" ] &&
	printf "%s%s: %s\n" "$scriptname" ${version:+" ($version)"} "$*" >&2
    exit "$error"
}


## if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
##    EXIST
## fi
##

function checkIfDir
{
    
    local dir=$1
    local result=""
    if [ ! -d "$dir" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"
};


## if [[ $(checkIfFile "${release_file}") -eq "$NON_EXIST" ]]; then
#   NON_EXIT
## fi

function checkIfFile
{
    local file=$1
    local result=""
    if [ ! -e "$file" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"	 
};


function checkIfVar()
{

    local var=$1
    local result=""
    if [ -z "$var" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"
}


# Usage :
# e3_version="$(read_file_get_string  "${file_name}" "E3_VERSION:=")";
# It ignores the # character
# 
function read_file_get_string
{
    local FILENAME=$1
    local PREFIX=$2

    local val=""
    while IFS= read -r line; do
	if [ "$line" ]; then
	    [[ "$line" =~ ^#.*$ ]] && continue
	    if [[ $line =~ "${PREFIX}" ]] ; then
	     	val=${line#$PREFIX}
	    fi
	fi
    done < ${FILENAME}

    echo "$val"
}


function yes_or_no_to_go
{

    printf "\n";
    printf  ">>>> $1\n";
    read -p ">>>> Do you want to continue (y/n)? " answer
    case ${answer:0:1} in
	y|Y )
	    printf ">>>> We are going to the further process ...... ";
	    ;;
	* )
            printf "Stop here.\n";
	    exit;
    ;;
    esac

}


function git_clone
{
    local rep_name=$1
    git clone ${GIT_URL}/$rep_name
}


# In order to execute this function correctly,
# git init first to be executed if the directory
# is not git repo
# [submodule "E3_MODULE_SRC_PATH"]
#      path = E3_MODULE_SRC_PATH
#      url  = url/E3_MODULE_SRC_PATH
# 
function add_submodule
{
    local rep_url=${1}
    local env_mod_name=${2}
    printf "${rep_url} is adding as submodule...\n";
    git submodule add ${rep_url};
    printf "add ignore = dirty ... \n"
    sed -i~ "/\\/${env_mod_name}/a\\\tignore = all" .gitmodules
    printf "\n";
    git submodule update --init --recursive
}  


function add_readme
{
    cat > README.md <<EOF

${_E3_MOD_NAME}  
======
ESS Site-specific EPICS module : ${_EPICS_MODULE_NAME}

EOF

}


function add_gitignore
{
    cat > .gitignore <<EOF
*~  
*-dev
modules.order
Module.symvers
Mkfile.old
core.*
#*
.#*
\#*
*.local
\#*
.cvsignore
*_old/
*PVs.list
EOF
}


function add_e3_makefile
{
    cat > Makefile <<EOF
#
#  Copyright (c) 2018 - Present  European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# 
# Author  : Jeong Han Lee
# email   : jeonghan.lee@gmail.com
# Date    : ${SC_LOGDATE}
# version : 0.0.1

TOP:=\$(CURDIR)

include \$(TOP)/configure/CONFIG

include \$(TOP)/configure/RULES

EOF
    
}


function addExampleSrc
{
    local DEST=${1}
    cat > ${DEST}/sncExample.stt <<"EOF"
program sncExample
double v;
assign v to "{user}:aiExample";
monitor v;

ss ss1 {
    state init {
        when (delay(10)) {
            printf("sncExample: Startup delay over\n");
        } state low
    }
    state low {
        when (v > 5.0) {
            printf("sncExample: Changing to high\n");
        } state high
    }
    state high {
        when (v <= 5.0) {
            printf("sncExample: Changing to low\n");
        } state low
    }
}

EOF
    cat > ${DEST}/sncExample.dbd <<"EOF"
registrar(sncExampleRegistrar)
EOF


    cat > ${DEST}/dbSubExample.c <<"EOF"
#include <stdio.h>

#include <dbDefs.h>
#include <registryFunction.h>
#include <subRecord.h>
#include <aSubRecord.h>
#include <epicsExport.h>

int mySubDebug;

static long mySubInit(subRecord *precord)
{
    if (mySubDebug)
        printf("Record %s called mySubInit(%p)\n",
               precord->name, (void*) precord);
    return 0;
}

static long mySubProcess(subRecord *precord)
{
    if (mySubDebug)
        printf("Record %s called mySubProcess(%p)\n",
               precord->name, (void*) precord);
    return 0;
}

static long myAsubInit(aSubRecord *precord)
{
    if (mySubDebug)
        printf("Record %s called myAsubInit(%p)\n",
               precord->name, (void*) precord);
    return 0;
}

static long myAsubProcess(aSubRecord *precord)
{
    if (mySubDebug)
        printf("Record %s called myAsubProcess(%p)\n",
               precord->name, (void*) precord);
    return 0;
}

/* Register these symbols for use by IOC code: */

epicsExportAddress(int, mySubDebug);
epicsRegisterFunction(mySubInit);
epicsRegisterFunction(mySubProcess);
epicsRegisterFunction(myAsubInit);
epicsRegisterFunction(myAsubProcess);

EOF

    cat > ${DEST}/dbSubExample.dbd <<"EOF"
variable(mySubDebug)
function(mySubInit)
function(mySubProcess)
function(myAsubInit)
function(myAsubProcess)

EOF
    
    cat > ${DEST}/myexampleHello.c <<"EOF"
/* Example showing how to register a new command with iocsh */

#include <stdio.h>

#include <epicsExport.h>
#include <iocsh.h>

/* This is the command, which the vxWorks shell will call directly */
void hello(const char *name) {
    if (name) {
        printf("Hello %s, from myexample\n", name);
    } else {
        puts("Hello from myexample");
    }
}

/* Information needed by iocsh */
static const iocshArg     helloArg0 = {"name", iocshArgString};
static const iocshArg    *helloArgs[] = {&helloArg0};
static const iocshFuncDef helloFuncDef = {"hello", 1, helloArgs};

/* Wrapper called by iocsh, selects the argument types that hello needs */
static void helloCallFunc(const iocshArgBuf *args) {
    hello(args[0].sval);
}

/* Registration routine, runs at startup */
static void helloRegister(void) {
    iocshRegister(&helloFuncDef, helloCallFunc);
}
epicsExportRegistrar(helloRegister);

EOF

 cat > ${DEST}/myexampleHello.dbd <<"EOF"
registrar(helloRegister)
EOF
    
    
}

function addExampleCmds
{
    local DEST=${1}
    cat > ${DEST}/example.cmd <<EOF
require ${_EPICS_MODULE_NAME},master
#require iocStats,ae5d083
#require recsync,1.3.0
#require autosave,5.9.0
#require MCoreUtils,1.2.1


epicsEnvSet(TOP, "\$(E3_CMD_TOP)")
epicsEnvSet("IOCNAME", "example")

dbLoadRecords("dbExample1.db" "user=\$(IOCNAME)")
dbLoadRecords("dbExample2.db" "user=\$(IOCNAME), no=1, scan=1 second")
dbLoadRecords("dbExample2.db" "user=\$(IOCNAME), no=2, scan=2 second")
dbLoadRecords("dbExample2.db" "user=\$(IOCNAME), no=3, scan=5 second")

dbLoadRecords("dbSubExample.db", "user=\$(IOCNAME)")

# need to define IOCNAME
# PV names
#loadIocsh("iocStats.iocsh", "IOCNAME=\$(IOCNAME)")
#loadIocsh("recsync.iocsh",  "IOCNAME=\$(IOCNAME)")
#loadIocsh("autosave.iocsh", "IOCNAME=\$(IOCNAME), AS_TOP=\$(TOP)")


iocInit()

## Start any sequence programs
seq sncExample, "user=\$(IOCNAME)"

EOF
}

function addExampleDb
{
    local DEST=${1}
 #    cat > ${DEST}/circle.db <<"EOF"

# record(ao, "$(user):circle:step") {
#   field(VAL , "1.0")
#   field(DRVL, "0.0")
#   field(DRVH, "359")
#   field(PINI, "YES")
# }

# record(ao, "$(user):circle:period") {
#   field(VAL , "1.0")
#   field(PINI, "YES")
#   field(OUT , "$(user):circle:tick.ODLY NPP")
# }

# record(calc, "$(user):circle:angle") {
#   field(PINI, "RUNNING") # bootstrap
#   field(INPA, "$(user):circle:angle NPP")
#   field(INPB, "$(user):circle:step NPP")
#   field(INPD, "360")
#   field(DESC, "Angle")
#   field(EGU , "deg")
#   field(LOLO, "45")
#   field(LOW , "135")
#   field(HIGH, "225")
#   field(HIHI, "315")
#   field(LLSV, "MAJOR")
#   field(LSV , "MINOR")
#   field(HSV , "MINOR")
#   field(HHSV, "MAJOR")
#   field(CALC, "C:=A+B;(C>=D)?C-D:C")
#   field(FLNK, "$(user):circle:x")
#   field(PREC, "3")
#   info(Q:group, {
#       "$(user):circle":{"angle": {+channel:"VAL"}},
#       "$(user):line":{"a": {+channel:"VAL"}}
#   })
#   alias("$(user):line:a")
# }

# record(calc, "$(user):circle:x") {
#   field(INPA, "$(user):circle:angle NPP")
#   field(CALC, "cos(A*PI/180)")
#   field(TSEL, "$(user):circle:angle.TIME")
#   field(FLNK, "$(user):circle:y")
#   field(PREC, "3")
#   info(Q:group, {
#       "$(user):circle":{"x": {+channel:"VAL"}}
#   })
# }

# record(calc, "$(user):circle:y") {
#   field(INPA, "$(user):circle:angle NPP")
#   field(CALC, "sin(A*PI/180)")
#   field(TSEL, "$(user):circle:angle.TIME")
#   field(PREC, "3")
#   field(FLNK, "$(user):line:b")
#   info(Q:group, {
#       "$(user):circle":{"y": {+channel:"VAL", +trigger:"*"}}
#   })
# }

# record(ai, "$(user):line:b") {
#   field(INP, "$(user):line:a NPP")
#   field(FLNK, "$(user):circle:tick")
#   info(Q:group, {
#       "$(user):line":{"b": {+channel:"VAL", +trigger:"*"}}
#   })
# }

# record(calcout, "$(user):circle:tick") {
#   field(ODLY, "1.0")
#   field(OUT , "$(user):circle:angle.PROC CA") # loop
# }

# EOF

    cat > ${DEST}/dbExample1.db <<"EOF"
record(ai, "$(user):aiExample")
{
        field(DESC, "Analog input")
        field(INP, "$(user):calcExample.VAL  NPP NMS")
        field(EGUF, "10")
        field(EGU, "Counts")
        field(HOPR, "10")
        field(LOPR, "0")
        field(HIHI, "8")
        field(HIGH, "6")
        field(LOW, "4")
        field(LOLO, "2")
        field(HHSV, "MAJOR")
        field(HSV, "MINOR")
        field(LSV, "MINOR")
        field(LLSV, "MAJOR")
}
record(calc, "$(user):calcExample")
{
        field(DESC, "Counter")
        field(SCAN,"1 second")
        field(FLNK, "$(user):aiExample")
        field(CALC, "(A<B)?(A+C):D")
        field(INPA, "$(user):calcExample.VAL  NPP NMS")
        field(INPB, "9")
        field(INPC, "1")
        field(INPD, "0")
        field(EGU, "Counts")
        field(HOPR, "10")
        field(HIHI, "8")
        field(HIGH, "6")
        field(LOW, "4")
        field(LOLO, "2")
        field(HHSV, "MAJOR")
        field(HSV, "MINOR")
        field(LSV, "MINOR")
        field(LLSV, "MAJOR")
}
record(compress,"$(user):compressExample")
{
        field(DESC, "Circular buffer")
        field(INP,"$(user):aiExample.VAL CP NMS")
        field(ALG,"Circular Buffer")
        field(NSAM,"10")
        field(HOPR,"10")
        field(EGU,"Counts")
}

EOF

    cat > ${DEST}/dbExample2.db <<"EOF"
record(calc, "$(user):calcExample$(no)")
{
        alias("$(user):calc$(no)")
        field(DESC, "Counter No. $(no)")
        field(SCAN,"$(scan)")
        field(FLNK, "$(user):aiExample$(no)")
        field(CALC, "(A<B)?(A+C):D")
        field(INPA, "$(user):calcExample$(no).VAL NPP NMS")
        field(INPB, "9")
        field(INPC, "1")
        field(INPD, "0")
        field(EGU, "Counts")
        field(HOPR, "10")
        field(HIHI, "8")
        field(HIGH, "6")
        field(LOW, "4")
        field(LOLO, "2")
        field(HHSV, "MAJOR")
        field(HSV, "MINOR")
        field(LSV, "MINOR")
        field(LLSV, "MAJOR")
}
record(ai, "$(user):aiExample$(no)")
{
        field(DESC, "Analog input No. $(no)")
        field(INP, "$(user):calcExample$(no).VAL NPP NMS")
        field(EGUF, "10")
        field(EGU, "Counts")
        field(HOPR, "10")
        field(LOPR, "0")
        field(HIHI, "8")
        field(HIGH, "6")
        field(LOW, "4")
        field(LOLO, "2")
        field(HHSV, "MAJOR")
        field(HSV, "MINOR")
        field(LSV, "MINOR")
        field(LLSV, "MAJOR")
}
alias("$(user):aiExample$(no)","$(user):ai$(no)")
EOF


    cat > ${DEST}/dbSubExample.db <<"EOF"
record(sub,"$(user):subExample")
{
    field(INAM,"mySubInit")
    field(SNAM,"mySubProcess")
}
record(aSub,"$(user):aSubExample")
{
    field(INAM,"myAsubInit")
    field(SNAM,"myAsubProcess")
    field(FTA,"DOUBLE")
    field(NOA,"10")
    field(INPA,"$(user):compressExample CPP")
}

EOF
}



function add_local_module_makefile
{
    local mod_name=${1}
    ## Module_name.Makefile

    cat > ${mod_name}.Makefile <<EOF
#
#  Copyright (c) 2018 - Present  European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# 
# Author  : ${SC_USER}
# email   : ${SC_USER}@esss.se
# Date    : generated by ${SC_LOGDATE}
# version : 0.0.0 
#

## The following lines are mandatory, please don't change them.
where_am_I := \$(dir \$(abspath \$(lastword \$(MAKEFILE_LIST))))
include \$(E3_REQUIRE_TOOLS)/driver.makefile
include \$(where_am_I)/../configure/DECOUPLE_FLAGS




# If one would like to use the module dependency restrictly,
# one should look at other modules makefile to add more
# In most case, one should ignore the following lines:

#ifneq (\$(strip \$(ASYN_DEP_VERSION)),)
#asyn_VERSION=\$(ASYN_DEP_VERSION)
#endif


## Exclude linux-ppc64e6500
EXCLUDE_ARCHS = linux-ppc64e6500


APP:=${mod_name}App
APPDB:=\$(APP)/Db
APPSRC:=\$(APP)/src

USR_INCLUDES += -I\$(where_am_I)\$(APPSRC)

TEMPLATES += \$(wildcard \$(APPDB)/*.db)
TEMPLATES += \$(wildcard \$(APPDB)/*.template)

SOURCES += \$(APPSRC)/dbSubExample.c
SOURCES += \$(APPSRC)/myexampleHello.c
SOURCES += \$(APPSRC)/sncExample.stt

DBDS    += \$(APPSRC)/dbSubExample.dbd
DBDS    += \$(APPSRC)/myexampleHello.dbd
DBDS    += \$(APPSRC)/sncExample.dbd

## This RULE should be used in case of inflating DB files 
## db rule is the default in RULES_DB, so add the empty one
## Please look at e3-mrfioc2 for example.

db: 

.PHONY: db 


# USR_DBFLAGS += -I . -I ..
# USR_DBFLAGS += -I \$(EPICS_BASE)/db
# USR_DBFLAGS += -I \$(APPDB)
#
# SUBS=\$(wildcard \$(APPDB)/*.substitutions)
# TMPS=\$(wildcard \$(APPDB)/*.template)
#
# db: \$(SUBS) \$(TMPS)

# \$(SUBS):
#	@printf "Inflating database ... %44s >>> %40s \n" "\$@" "\$(basename \$(@)).db"
#	@rm -f  \$(basename \$(@)).db.d  \$(basename \$(@)).db
#	@\$(MSI) -D \$(USR_DBFLAGS) -o \$(basename \$(@)).db -S \$@  > \$(basename \$(@)).db.d
#	@\$(MSI)    \$(USR_DBFLAGS) -o \$(basename \$(@)).db -S \$@

# \$(TMPS):
#	@printf "Inflating database ... %44s >>> %40s \n" "\$@" "\$(basename \$(@)).db"
#	@rm -f  \$(basename \$(@)).db.d  \$(basename \$(@)).db
#	@\$(MSI) -D \$(USR_DBFLAGS) -o \$(basename \$(@)).db \$@  > \$(basename \$(@)).db.d
#	@\$(MSI)    \$(USR_DBFLAGS) -o \$(basename \$(@)).db \$@

#
# .PHONY: db \$(SUBS) \$(TMPS)

vlibs:

.PHONY: vlibs


EOF
    
}


function add_module_makefile
{
    local mod_name=${1}
    ## Module_name.Makefile

    cat > ${mod_name}.Makefile <<EOF
#
#  Copyright (c) 2018 - Present  European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# 
# Author  : ${SC_USER}
# email   : ${SC_USER}@esss.se
# Date    : generated by ${SC_LOGDATE}
# version : 0.0.0 
#
# template file is generated by $0 with ${SC_HASH}
# Please look at many other _module_.Makefile in e3-* repository
# 

## The following lines are mandatory, please don't change them.
where_am_I := \$(dir \$(abspath \$(lastword \$(MAKEFILE_LIST))))
include \$(E3_REQUIRE_TOOLS)/driver.makefile
include \$(where_am_I)/../configure/DECOUPLE_FLAGS




# If one would like to use the module dependency restrictly,
# one should look at other modules makefile to add more
# In most case, one should ignore the following lines:

#ifneq (\$(strip \$(ASYN_DEP_VERSION)),)
#asyn_VERSION=\$(ASYN_DEP_VERSION)
#endif





## Exclude linux-ppc64e6500
##EXCLUDE_ARCHS = linux-ppc64e6500


# APP:=calcApp
# APPDB:=\$(APP)/Db
# APPSRC:=\$(APP)/src


# USR_INCLUDES += -I\$(where_am_I)\$(APPSRC)

# USR_CFLAGS   += -Wno-unused-variable
# USR_CFLAGS   += -Wno-unused-function
# USR_CFLAGS   += -Wno-unused-but-set-variable
# USR_CPPFLAGS += -Wno-unused-variable
# USR_CPPFLAGS += -Wno-unused-function
# USR_CPPFLAGS += -Wno-unused-but-set-variable

# TEMPLATES += \$(wildcard \$(APPDB)/*.db)

# DBDINC_SRCS += \$(APPSRC)/swaitRecord.c
# DBDINC_SRCS += \$(APPSRC)/sseqRecord.c
# DBDINC_SRCS += \$(APPSRC)/aCalcoutRecord.c
# DBDINC_SRCS += \$(APPSRC)/sCalcoutRecord.c
# DBDINC_SRCS += \$(APPSRC)/transformRecord.c

# DBDINC_DBDS = \$(subst .c,.dbd,   \$(DBDINC_SRCS:\$(APPSRC)/%=%))
# DBDINC_HDRS = \$(subst .c,.h,     \$(DBDINC_SRCS:\$(APPSRC)/%=%))
# DBDINC_DEPS = \$(subst .c,\$(DEP), \$(DBDINC_SRCS:\$(APPSRC)/%=%))


# HEADERS += \$(APPSRC)/sCalcPostfix.h
# HEADERS += \$(APPSRC)/aCalcPostfix.h
# HEADERS += \$(DBDINC_HDRS)


# SOURCES += \$(APPSRC)/sCalcPostfix.c
# SOURCES += \$(APPSRC)/sCalcPerform.c
# SOURCES += \$(APPSRC)/aCalcPostfix.c
# SOURCES += \$(APPSRC)/aCalcPerform.c

# SOURCES += \$(APPSRC)/calcUtil.c
# SOURCES += \$(APPSRC)/myFreeListLib.c
# SOURCES += \$(APPSRC)/devsCalcoutSoft.c
# SOURCES += \$(APPSRC)/devaCalcoutSoft.c
# SOURCES += \$(APPSRC)/subAve.c
# SOURCES += \$(APPSRC)/swaitRecord.c
# SOURCES += \$(APPSRC)/editSseq.st
# SOURCES += \$(APPSRC)/interp.c
# SOURCES += \$(APPSRC)/arrayTest.c
# SOURCES += \$(APPSRC)/aCalcMonitorMem.c
# # DBDINC_SRCS should be last of the series of SOURCES
# SOURCES += \$(DBDINC_SRCS)

# DBDS += \$(APPSRC)/calcSupport_LOCAL.dbd
# DBDS += \$(APPSRC)/calcSupport_withSNCSEQ.dbd
# DBDS += \$(APPSRC)/calcSupport_withSSCAN.dbd

#
# \$(DBDINC_DEPS): \$(DBDINC_HDRS)
#
# .dbd.h:
# 	\$(DBTORECORDTYPEH)  \$(USR_DBDFLAGS) -o \$@ \$<
#
# .PHONY: \$(DBDINC_DEPS) .dbd.h
#
#
# The following lines could be useful if one uses the external lib
#
# Examples...
# 
# USR_CFLAGS += -fPIC
# USR_CFLAGS   += -DDEBUG_PRINT
# USR_CPPFLAGS += -DDEBUG_PRINT
# USR_CPPFLAGS += -DUSE_TYPED_RSET
# USR_INCLUDES += -I/usr/include/libusb-1.0
# USR_LDFLAGS += -lusb-1.0
# USR_LDFLAGS += -L /opt/etherlab/lib
# USR_LDFLAGS += -lethercat
# USR_LDFLAGS += -Wl,-rpath=/opt/etherlab/lib

## SYSTEM LIBS 
##
# USR_LIBS += boost_regex
# USR_LIBS += readline
# USR_LIBS += xml2

#

# # We don't have LIB_INSTALLS, so will tackle later
# ifeq (\$(T_A),linux-x86_64)
# USR_LDFLAGS += -Wl,--enable-new-dtags
# USR_LDFLAGS += -Wl,-rpath=\$(E3_MODULES_VENDOR_LIBS_LOCATION)
# USR_LDFLAGS += -L\$(E3_MODULES_VENDOR_LIBS_LOCATION)
# USR_LDFLAGS += -lflycapture
# endif

# According to its makefile
# VENDOR_LIBS += \$(SUPPORT)/os/linux-x86_64/libflycapture.so.2.8.3.1
# VENDOR_LIBS += \$(SUPPORT)/os/linux-x86_64/libflycapture.so.2
# VENDOR_LIBS += \$(SUPPORT)/os/linux-x86_64/libflycapture.so




## This RULE should be used in case of inflating DB files 
## db rule is the default in RULES_DB, so add the empty one
## Please look at e3-mrfioc2 for example.

db: 

.PHONY: db 

# EPICS_BASE_HOST_BIN = \$(EPICS_BASE)/bin/\$(EPICS_HOST_ARCH)
# MSI = \$(EPICS_BASE_HOST_BIN)/msi
#
# USR_DBFLAGS += -I . -I ..
# USR_DBFLAGS += -I \$(EPICS_BASE)/db
# USR_DBFLAGS += -I \$(APPDB)
#
# SUBS=\$(wildcard \$(APPDB)/*.substitutions)
# TMPS=\$(wildcard \$(APPDB)/*.template)
#
# db: \$(SUBS) \$(TMPS)

# \$(SUBS):
#	@printf "Inflating database ... %44s >>> %40s \n" "\$@" "\$(basename \$(@)).db"
#	@rm -f  \$(basename \$(@)).db.d  \$(basename \$(@)).db
#	@\$(MSI) -D \$(USR_DBFLAGS) -o \$(basename \$(@)).db -S \$@  > \$(basename \$(@)).db.d
#	@\$(MSI)    \$(USR_DBFLAGS) -o \$(basename \$(@)).db -S \$@

# \$(TMPS):
#	@printf "Inflating database ... %44s >>> %40s \n" "\$@" "\$(basename \$(@)).db"
#	@rm -f  \$(basename \$(@)).db.d  \$(basename \$(@)).db
#	@\$(MSI) -D \$(USR_DBFLAGS) -o \$(basename \$(@)).db \$@  > \$(basename \$(@)).db.d
#	@\$(MSI)    \$(USR_DBFLAGS) -o \$(basename \$(@)).db \$@

#
# .PHONY: db \$(SUBS) \$(TMPS)

vlibs:

.PHONY: vlibs

# vlibs: \$(VENDOR_LIBS)

# \$(VENDOR_LIBS):
# 	\$(QUIET)\$(SUDO) install -m 555 -d \$(E3_MODULES_VENDOR_LIBS_LOCATION)/
# 	\$(QUIET)\$(SUDO) install -m 555 \$@ \$(E3_MODULES_VENDOR_LIBS_LOCATION)/

# .PHONY: \$(VENDOR_LIBS) vlibs



EOF
    
}


function add_patch
{
    cat > README.md <<EOF
# Site Specific EPICS Module Patch Files

## Changes
The changes were tested in local environemnt, and commits to the forked repository and do pull request to the epics community module repository.

* Check the original HASH, and your own master
* feb8856 : The original HASH
* master : Changed


## How to create a p0 patch file between commits


* Show what the difference between commits


* Create p0 patch

\`\`\`
\$git diff feb8856 master --no-prefix > ../patch/Site/what_ever_filename.p0.patch
\`\`\`

EOF

    cat > HISTORY.md <<EOF
# what_ever_filename.p0.patch

Generic Description.....

* created by Jeong Han Lee, han.lee@esss.se
* related URL or reference https://github.com/icshwi
* Tuesday, February 13 13:24:57 CET 2018
EOF

}



function add_configure
{

    cat > CONFIG <<EOF
VARS_EXCLUDES := \$(.VARIABLES)

ifneq (,\$(findstring dev,\$(MAKECMDGOALS)))
include \$(TOP)/configure/RELEASE_DEV
else
include \$(TOP)/configure/RELEASE
endif

# CONFIG=\$(EPICS_BASE)/configure
# include \$(CONFIG)/CONFIG

ifneq (,\$(findstring dev,\$(MAKECMDGOALS)))
include \$(TOP)/configure/CONFIG_MODULE_DEV
else
include \$(TOP)/configure/CONFIG_MODULE
endif

## Asyn, ADSupport may needs to define other variables

-include \$(TOP)/configure/CONFIG_OPTIONS

## It is not necessary to modify the following files in most case.
## Order is matter

include \$(TOP)/configure/E3/CONFIG_REQUIRE
include \$(TOP)/configure/E3/CONFIG_E3_PATH
include \$(TOP)/configure/E3/CONFIG_E3_MAKEFILE
include \$(TOP)/configure/E3/CONFIG_EPICS
include \$(TOP)/configure/E3/CONFIG_SUDO
include \$(TOP)/configure/E3/CONFIG_EXPORT
EOF


    cat > RELEASE <<EOF
EPICS_BASE=${_EPICS_BASE}

E3_REQUIRE_NAME:=${_E3_REQUIRE_NAME}
E3_REQUIRE_VERSION:=${_E3_REQUIRE_VERSION}


# ONLY IF this module has the sequencer dependency. However,
# in most case, we don't need to enable the following line,
# the default - latest version will be used
#E3_SEQUENCER_NAME:=sequencer
#E3_SEQUENCER_VERSION:=2.1.21


# The definitions shown below can also be placed in an untracked RELEASE.local
-include \$(TOP)/../RELEASE.local
-include \$(TOP)/configure/RELEASE.local
EOF


    cat > RELEASE_DEV <<EOF
EPICS_BASE=${_EPICS_BASE}

E3_REQUIRE_NAME:=${_E3_REQUIRE_NAME}
E3_REQUIRE_VERSION:=${_E3_REQUIRE_VERSION}

# The definitions shown below can also be placed in an untracked RELEASE_DEV.local
-include \$(TOP)/../RELEASE_DEV.local
-include \$(TOP)/configure/RELEASE_DEV.local
EOF


    cat > CONFIG_MODULE <<EOF
#
EPICS_MODULE_NAME:=${_EPICS_MODULE_NAME}

EPICS_MODULE_TAG:=master
#
E3_MODULE_VERSION:=master

# DEPENDENT MODULE VERSION
# Example, 
#ASYN_DEP_VERSION:=4.33.0
#SEQ_DEP_VERSION:=2.1.21
#PCRE_DEP_VERSION:=8.41.
#ADCORE_DEP_VERSION:=3.2.0
#ADSUPPORT_DEP_VERSION:=1.4.0
#
# 
#E3_KMOD_SRC_PATH:=\$(E3_MODULE_SRC_PATH)
#
# In most case, we don't need to touch the following variables.
#

E3_MODULE_NAME:=\$(EPICS_MODULE_NAME)
E3_MODULE_SRC_PATH:=${_E3_MODULE_SRC_PATH}
E3_MODULE_MAKEFILE:=\$(EPICS_MODULE_NAME).Makefile



# The definitions shown below can also be placed in an untracked CONFIG_MODULE.local
-include \$(TOP)/configure/CONFIG_MODULE.local
EOF


    cat > CONFIG_MODULE_DEV <<EOF
#
EPICS_MODULE_NAME:=${_EPICS_MODULE_NAME}
EPICS_MODULE_TAG:=master
#
E3_MODULE_VERSION:=develop


# DEPENDENT MODULE VERSION
# Example, 
#ASYN_DEP_VERSION:=4.33.0
#SEQ_DEP_VERSION:=2.1.21
#PCRE_DEP_VERSION:=8.41.
#ADCORE_DEP_VERSION:=3.2.0
#ADSUPPORT_DEP_VERSION:=1.4.0
#
# ONLY IF this module has the sequencer dependency. However,
# in most case, we don't need to enable the following line,
# the default - latest version will be used
#E3_SEQUENCER_NAME:=sequencer
#E3_SEQUENCER_VERSION:=2.1.21
#
# In most case, we don't need to touch the following variables.
#
E3_MODULE_NAME:=\$(EPICS_MODULE_NAME)
E3_MODULE_SRC_PATH:=${_E3_MODULE_SRC_PATH}-dev
E3_MODULE_MAKEFILE:=\$(EPICS_MODULE_NAME).Makefile

#export E3_MODULE_DEV_GITURL:="https://where your git repo"
E3_MODULE_DEV_GITURL:="${_E3_MODULE_GITURL_FULL}"


# The definitions shown below can also be placed in an untracked CONFIG_MODULE_DEV.local
-include \$(TOP)/configure/CONFIG_MODULE_DEV.local
EOF


    cat > RULES <<EOF
#CONFIG
# include \$(EPICS_BASE)/configure/RULES

include \$(TOP)/configure/E3/DEFINES_FT
-include \$(TOP)/configure/E3/RULES_PATCH
include \$(TOP)/configure/E3/RULES_E3
-include \$(TOP)/configure/E3/RULES_PV
include \$(TOP)/configure/E3/RULES_E3_SITELIBS
include \$(TOP)/configure/E3/RULES_EPICS
-include \$(TOP)/configure/E3/RULES_KMOD

include \$(TOP)/configure/E3/RULES_DB
-include \$(TOP)/configure/E3/RULES_VLIBS
include \$(TOP)/configure/E3/RULES_VARS
-include \$(TOP)/configure/E3/RULES_PROD


ifneq (,\$(findstring dev,\$(MAKECMDGOALS)))
include \$(TOP)/configure/E3/RULES_DEV
endif
EOF



    cat > CONFIG_OPTIONS <<EOF
# The following variable should be in CONFIG_EXPORT
# However, WITH_% is in CONFIG_EXPORT automatically
# 
# WITH_PVA:=NO

# The definitions shown below can also be placed in an untracked CONFIG_OPTIONS.local
-include \$(TOP)/configure/CONFIG_OPTIONS.local


EOF

    cat > DECOUPLE_FLAGS <<EOF
# *** ISSUES
# driver.makefile recursively read all include directories which were installed.
# The only way to exclude header files is....

iocStats_VERSION=
autosave_VERSION=
asyn_VERSION=
busy_VERSION=
modbus_VERSION=
ipmiComm_VERSION=
# Remove sequencer....due to "duplicated" VARIABLES
#sequencer_VERSION=
sscan_VERSION=


std_VERSION=
ip_VERSION=
calc_VERSION=
delaygen_VERSION=
pcre_VERSION=
stream_VERSION=
s7plc_VERSION=
recsync_VERSION=
MCoreUtils_VERSION=


devlib2_VERSION=
mrfioc2_VERSION=

exprtk_VERSION=
motor_VERSION=
ecmc_VERSION=
EthercatMC_VERSION=
ecmctraining_VERSION=

keypress_VERSION=
sysfs_VERSION=
symbolname_VERSION=
memDisplay_VERSION=
regdev_VERSION=
i2cDev_VERSION=

tosca_VERSION=
tsclib_VERSION=
ifcdaqdrv2_VERSION=

## The main issue is nds3, it is mandatory to disable it
## 
nds3_VERSION=
nds3epics_VERSION=
ifc14edrv_VERSION=
ifcfastint_VERSION=


nds_VERSION=
loki_VERSION=
nds_VERSION=
sis8300drv_VERSION=
sis8300_VERSION=
sis8300llrfdrv_VERSION=
sis8300llrf_VERSION=

ADSupport_VERSION=
ADCore_VERSION=
ADSimDetector_VERSION=
ADAndor_VERSION=
ADAndor3_VERSION=
ADPointGrey_VERSION=
ADProsilica_VERSION=

amcpico8_VERSION=
adpico8_VERSION=
adsis8300_VERSION=
adsis8300bcm_VERSION=
adsis8300bpm_VERSION=
adsis8300fc_VERSION=

pvCommon_VERSION=
pvData_VERSION=
pvAccess_VERSION=
pva2pva_VERSION=
pvDatabase_VERSION=
normativeTypes_VERSION=
pvaClient_VERSION=



EOF




    
}


function add_configure_e3
{

    cat > CONFIG_SUDO <<EOF
# IF EPICS_BASE is not WRITABLE, SUDO and SUDOBASH should be used 
# SUDO_INFO 1 : SUDO is needed (NOT writable)
# SUDO_INFO 0 : SUDO is not needed
SUDO_INFO := \$(shell test -w \$(EPICS_BASE) 1>&2 2> /dev/null; echo \$\$?)

ifeq "\$(SUDO_INFO)" "1"
SUDO := sudo
SUDOBASH = \$(SUDO) -E
SUDOBASH += bash -c
else
SUDO :=
SUDOBASH = bash -c
endif    


# Valid for only Development Mode, because we clone/remove them
# See RULES_DEV
# E3_MODULE_SRC_PATH_INFO 1 : the directory is not there
# E3_MODULE_SRC_PATH_INFO 0 : the directory is there
E3_MODULE_SRC_PATH_INFO := \$(shell test -d \$(E3_MODULE_SRC_PATH) 1>&2 2> /dev/null; echo \$\$?)

ifeq "\$(E3_MODULE_SRC_PATH_INFO)" "1"
INIT_E3_MODULE_SRC = 1
endif    

EOF

    cat > CONFIG_REQUIRE <<EOF
E3_REQUIRE_LOCATION:=\$(EPICS_BASE)/\$(E3_REQUIRE_NAME)/\$(E3_REQUIRE_VERSION)

E3_REQUIRE_BIN:=\$(E3_REQUIRE_LOCATION)/bin
E3_REQUIRE_TOOLS:=\$(E3_REQUIRE_LOCATION)/tools
E3_REQUIRE_LIB:=\$(E3_REQUIRE_LOCATION)/lib
E3_REQUIRE_DB:=\$(E3_REQUIRE_LOCATION)/db
E3_REQUIRE_DBD:=\$(E3_REQUIRE_LOCATION)/dbd
E3_REQUIRE_INC:=\$(E3_REQUIRE_LOCATION)/include

EOF

    cat > CONFIG_EPICS <<EOF
COMMUNITY_EPICS_MODULES:=\$(EPICS_BASE)/epics-modules

M_AUTOSAVE:=\$(COMMUNITY_EPICS_MODULES)/autosave
M_DEVLIB2:=\$(COMMUNITY_EPICS_MODULES)/devlib2
M_IOCSTATS:=\$(COMMUNITY_EPICS_MODULES)/iocStats
M_ASYN:=\$(COMMUNITY_EPICS_MODULES)/asyn
M_BUSY:=\$(COMMUNITY_EPICS_MODULES)/busy
M_MODBUS:=\$(COMMUNITY_EPICS_MODULES)/modbus
M_MRFIOC2:=\$(COMMUNITY_EPICS_MODULES)/mrfioc2
M_LUA:=\$(COMMUNITY_EPICS_MODULES)/lua
M_IPMICOMM:=\$(COMMUNITY_EPICS_MODULES)/ipmiComm
M_STREAM:=\$(COMMUNITY_EPICS_MODULES)/stream
M_CALC:=\$(COMMUNITY_EPICS_MODULES)/calc
M_MOTOR:=\$(COMMUNITY_EPICS_MODULES)/motor
M_SSCAN:=\$(COMMUNITY_EPICS_MODULES)/sscan
M_SNCSEQ:=\$(COMMUNITY_EPICS_MODULES)/seq
M_IP:=\$(COMMUNITY_EPICS_MODULES)/ip
M_IPAC:=\$(COMMUNITY_EPICS_MODULES)/ipac
M_ADSUPPORT:=\$(COMMUNITY_EPICS_MODULES)/adsupport
M_ADCORE:=\$(COMMUNITY_EPICS_MODULES)/adcore


M_PVDATA:=\$(COMMUNITY_EPICS_MODULES)/pvData
M_PVACCESS:=\$(COMMUNITY_EPICS_MODULES)/pvAccess
M_PVA2PVA:=\$(COMMUNITY_EPICS_MODULES)/pva2pva
M_PVCOMMON:=\$(COMMUNITY_EPICS_MODULES)/pvCommon
M_PVASRV:=\$(COMMUNITY_EPICS_MODULES)/pvaSrv
M_PVDATABASE:=\$(COMMUNITY_EPICS_MODULES)/pvDatabase
M_NORMATIVETYPES:=\$(COMMUNITY_EPICS_MODULES)/normativeTypes
M_PVACLIENT:=\$(COMMUNITY_EPICS_MODULES)/pvaClient

EXPORT_VARS+=\$(filter M_%,\$(.VARIABLES))

### Exclude the following variables to display 
VARS_EXCLUDES+=COMMUNITY_EPICS_MODULES
VARS_EXCLUDES+=\$(filter M_%,\$(.VARIABLES))

EOF

    




    
    cat > CONFIG_E3_PATH <<EOF
E3_MODULES_PATH:=\$(E3_REQUIRE_LOCATION)/siteMods
E3_SITEMODS_PATH:=\$(E3_MODULES_PATH)
E3_SITELIBS_PATH:=\$(E3_REQUIRE_LOCATION)/siteLibs
E3_SITEAPPS_PATH:=\$(E3_REQUIRE_LOCATION)/siteApps

E3_MODULES_VENDOR_LIBS_LOCATION:=\$(E3_SITELIBS_PATH)/vendor/\$(E3_MODULE_NAME)/\$(E3_MODULE_VERSION)
E3_MODULES_INSTALL_LOCATION:=\$(E3_SITEMODS_PATH)/\$(E3_MODULE_NAME)/\$(E3_MODULE_VERSION)

E3_MODULES_INSTALL_LOCATION_INC:=\$(E3_MODULES_INSTALL_LOCATION)/include
E3_MODULES_INSTALL_LOCATION_DB :=\$(E3_MODULES_INSTALL_LOCATION)/db
E3_MODULES_INSTALL_LOCATION_BIN:=\$(E3_MODULES_INSTALL_LOCATION)/bin
E3_MODULES_INSTALL_LOCATION_LIB:=\$(E3_MODULES_INSTALL_LOCATION)/lib


E3_MODULES_INSTALL_LOCATION_INC_LINK:=\$(E3_SITELIBS_PATH)/\$(E3_MODULE_NAME)_\$(E3_MODULE_VERSION)_include
E3_MODULES_INSTALL_LOCATION_DB_LINK :=\$(E3_SITELIBS_PATH)/\$(E3_MODULE_NAME)_\$(E3_MODULE_VERSION)_db
E3_MODULES_INSTALL_LOCATION_BIN_LINK:=\$(E3_SITELIBS_PATH)/\$(E3_MODULE_NAME)_\$(E3_MODULE_VERSION)_bin
E3_MODULES_INSTALL_LOCATION_LIB_LINK:=\$(E3_SITELIBS_PATH)/\$(E3_MODULE_NAME)_\$(E3_MODULE_VERSION)_lib


E3_MODULES_INSTALL_LOCATION_DBD:=\$(E3_MODULES_INSTALL_LOCATION)/dbd/\$(E3_MODULE_NAME).dbd
E3_MODULES_INSTALL_LOCATION_DBD_LINK:=\$(E3_SITELIBS_PATH)/\$(E3_MODULE_NAME).dbd.\$(E3_MODULE_VERSION)

EXPORT_VARS+=E3_MODULES_VENDOR_LIBS_LOCATION
#EXPORT_VARS+=E3_MODULES_INSTALL_LOCATION_INC
#EXPORT_VARS+=E3_MODULES_INSTALL_LOCATION_DB
#EXPORT_VARS+=E3_MODULES_INSTALL_LOCATION_BIN
#EXPORT_VARS+=E3_MODULES_INSTALL_LOCATION_LIB
EXPORT_VARS+=E3_MODULES_INSTALL_LOCATION_LIB_LINK

# It is a bit weird, it would be better to implement within driver.makefile later
# Assumption : we are using the same lib name from driver.makefile 
E3_MODULES_LIBNAME:=lib\$(E3_MODULE_NAME).so
E3_MODULES_LIBLINKNAME:=\$(E3_MODULES_LIBNAME).\$(E3_MODULE_VERSION)


INSTALLED_EPICS_BASE_ARCHS_PATHS=\$(sort \$(dir \$(wildcard \$(EPICS_BASE)/bin/*/)))
TEMP_INSTALLED_EPICS_BASE_ARCHS=\$(INSTALLED_EPICS_BASE_ARCHS_PATHS:\$(EPICS_BASE)/bin/%=%)
INSTALLED_EPICS_BASE_ARCHS=\$(TEMP_INSTALLED_EPICS_BASE_ARCHS:/=)

### Exclude the following variables to display 
VARS_EXCLUDES+=TEMP_INSTALLED_EPICS_BASE_ARCHS
VARS_EXCLUDES+=INSTALLED_EPICS_BASE_ARCHS_PATHS
EOF

    cat > CONFIG_E3_MAKEFILE <<EOF
# Pass necessary driver.makefile variables through makefile options
#
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS := -C \$(E3_MODULE_SRC_PATH)
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += -f \$(E3_MODULE_MAKEFILE)
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += LIBVERSION="\$(E3_MODULE_VERSION)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += PROJECT="\$(E3_MODULE_NAME)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += EPICS_MODULES="\$(E3_MODULES_PATH)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += EPICS_LOCATION="\$(EPICS_BASE)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += BUILDCLASSES="Linux"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += E3_SITEMODS_PATH="\$(E3_SITEMODS_PATH)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += E3_SITEAPPS_PATH="\$(E3_SITEAPPS_PATH)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += E3_SITELIBS_PATH="\$(E3_SITELIBS_PATH)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += E3_SEQUENCER_NAME="\$(E3_SEQUENCER_NAME)"
E3_REQUIRE_MAKEFILE_INPUT_OPTIONS += E3_SEQUENCER_VERSION="\$(E3_SEQUENCER_VERSION)"

E3_MODULE_MAKE_CMDS:=make \$(E3_REQUIRE_MAKEFILE_INPUT_OPTIONS)

VARS_EXCLUDES+=E3_REQUIRE_MAKEFILE_INPUT_OPTIONS
EOF

    cat > CONFIG_EXPORT <<EOF
# Variables should be transferred to module_name.makefile

EPICS_HOST_ARCH:=\$(shell perl \$(EPICS_BASE)/startup/EpicsHostArch.pl)

# In near future, BASE may drop "startup" directory, so
#
ifeq (\$(strip \$(EPICS_HOST_ARCH)),)
EPICS_HOST_ARCH:=$(shell perl \$(EPICS_BASE)/src/tools/EpicsHostArch.pl)
endif


MSI:=\$(EPICS_BASE)/bin/\$(EPICS_HOST_ARCH)/msi

EXPORT_VARS+=EPICS_HOST_ARCH
EXPORT_VARS+=EPICS_BASE
EXPORT_VARS+=MSI
EXPORT_VARS+=E3_REQUIRE_TOOLS
EXPORT_VARS+=E3_MODULE_VERSION
EXPORT_VARS+=E3_SITEMODS_PATH
EXPORT_VARS+=E3_SITEAPPS_PATH
EXPORT_VARS+=E3_SITELIBS_PATH
EXPORT_VARS+=E3_SEQUENCER_NAME
EXPORT_VARS+=E3_SEQUENCER_VERSION

EXPORT_VARS+=QUIET
EXPORT_VARS+=\$(filter %_DEP_VERSION,\$(.VARIABLES))
EXPORT_VARS+=\$(filter WITH_%,\$(.VARIABLES))
EXPORT_VARS+=\$(filter SUDO%,\$(.VARIABLES))

export_version=\$(eval export \$1)
\$(eval \$(foreach v,\$(EXPORT_VARS),\$(call export_version,\$v)))

VARS_EXCLUDES+=export_version

EOF



    cat > DEFINES_FT <<EOF
# Keep always the module up-to-date
define git_update =
git submodule deinit -f \$@/
sed -i '/submodule/,24465d'  \$(TOP)/.git/config
rm -rf \$(TOP)/.git/modules/\$@
git submodule init \$@/
git submodule update --init --recursive \$@/.
git submodule update --remote --merge \$@/
endef

define git_module_init_update =
git submodule update --init --recursive \$@/.
git submodule update --remote --merge \$@/
endef

define patch_site
for i in \$(wildcard \$(TOP)/patch/Site/\$(E3_MODULE_VERSION)-*.p0.patch); do\\
	printf "\nPatching %s with the file : %s\n" "\$(E3_MODULE_SRC_PATH)" "\$\$i";\\
	patch -d \$(E3_MODULE_SRC_PATH) --ignore-whitespace -p0 < \$\$i;\\
done
endef


define patch_revert_site
for i in \$(wildcard \$(TOP)/patch/Site/\$(E3_MODULE_VERSION)-*.p0.patch); do\\
	printf "\nPatching %s with the file : %s\n" "\$(E3_MODULE_SRC_PATH)" "\$\$i";\\
	patch -R -d \$(E3_MODULE_SRC_PATH) --ignore-whitespace -p0 < \$\$i;\\
done
endef


ifndef VERBOSE
  QUIET := @
endif

ifdef DEBUG_SHELL
  SHELL = /bin/sh -x
endif


### Exclude the following variables to display 
VARS_EXCLUDES+=git_update
VARS_EXCLUDES+=git_module_init_update
VARS_EXCLUDES+=patch_site
VARS_EXCLUDES+=patch_revert_site
VARS_EXCLUDES+=QUIET
VARS_EXCLUDES+=SHELL
EOF

    cat > RULES_PATCH <<EOF

.PHONY: patch patchrevert


## Apply Patch Files 
patch:
	\$(QUIET) \$(call patch_site)

## Revert Patch Files 
patchrevert:
	\$(QUIET) \$(call patch_revert_site)

EOF
    


    cat  > RULES_VARS <<EOF

E3_MODULES_VARIABLES:=\$(sort \$(filter-out \$(VARS_EXCLUDES) VARS_EXCLUDES,\$(.VARIABLES)))

.PHONY : env vars header

## Print interesting VARIABLES
env: vars

vars: header
	\$(foreach v, \$(E3_MODULES_VARIABLES), \$(info \$(v) = \$(\$(v)))) @#noop

header:
	\$(QUIET)echo ""
	\$(QUIET)echo "------------------------------------------------------------"
	\$(QUIET)echo ">>>>     Current EPICS and E3 Envrionment Variables     <<<<"
	\$(QUIET)echo "------------------------------------------------------------"
	\$(QUIET)echo ""

existent:
	\$(QUIET)tree -L 2 \$(E3_MODULES_PATH)/\$(E3_MODULE_NAME)

EOF


    cat > RULES_PROD <<EOF

PROD_BIN_PATH:=\$(E3_MODULES_INSTALL_LOCATION_BIN_LINK)/\$(EPICS_HOST_ARCH)

prod_env:
	\$(info -------- In most case, you can run the following export in a terminal --------)
	\$(info export PATH=\$(PROD_BIN_PATH):\$\${PATH})
	\$(info ------------------------------------------------------------------------------)


.PHONY: prod_env

EOF
    
    cat > RULES_EPICS <<EOF
# One should define the any dependency modules and EPICS base path
# in the following directory

.PHONY: epics epics-clean

epics:
	\$(QUIET)echo "EPICS_BASE=\$(EPICS_BASE)"        > \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/RELEASE
#	\$(QUIET)echo "ASYN=\$(M_ASYN)"                  > \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/RELEASE
#	\$(QUIET)echo "SSCAN=\$(M_SSCAN)"               >> \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/RELEASE
#	\$(QUIET)echo "SNCSEQ=\$(M_SNCSEQ)"             >> \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/RELEASE
	\$(QUIET)echo "CHECK_RELEASE = YES"              > \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/CONFIG_SITE
#	\$(QUIET)echo "INSTALL_LOCATION=\$(M_DEVLIB2)"  >> \$(TOP)/\$(E3_MODULE_SRC_PATH)/configure/CONFIG_SITE
	\$(SUDOBASH) "\$(MAKE) -C \$(E3_MODULE_SRC_PATH)"

epics-clean:
	\$(SUDOBASH) "\$(MAKE) -C \$(E3_MODULE_SRC_PATH) clean"


EOF


    cat > RULES_KMOD <<EOF

modules:
	\$(MAKE) -C \$(E3_KMOD_SRC_PATH) \$@


# Always SUDO is needed
modules_install:
	sudo -E bash -c "\$(MAKE) -C \$(E3_KMOD_SRC_PATH) \$@"

modules_clean: 
	\$(MAKE) -C \$(E3_KMOD_SRC_PATH) clean
	

.PHONY: modules modules_install modules_clean

EOF



    
    cat > RULES_E3 <<EOF
.DEFAULT_GOAL := help

.PHONY: help default install uninstall build rebuild clean conf

# # help is defined in 
# # https://gist.github.com/rcmachado/af3db315e31383502660
help:
	\$(info --------------------------------------- )	
	\$(info Available targets)
	\$(info --------------------------------------- )
	\$(QUIET) awk '/^[a-zA-Z\-\_0-9]+:/ {            \\
	  nb = sub( /^## /, "", helpMsg );              \\
	  if(nb == 0) {                                 \\
	    helpMsg = \$\$0;                              \\
	    nb = sub( /^[^:]*:.* ## /, "", helpMsg );   \\
	  }                                             \\
	  if (nb)                                       \\
	    print  \$\$1 "\t" helpMsg;                    \\
	}                                               \\
	{ helpMsg = \$\$0 }'                              \\
	\$(MAKEFILE_LIST) | column -ts:	


default: help

## Install : \$(E3_MODULE_NAME)
install: install_module install_links

#install_module: uninstall 
install_module: uninstall db
	\$(QUIET) \$(SUDOBASH) '\$(E3_MODULE_MAKE_CMDS) install'

## Uninstall : \$(E3_MODULE_NAME)
uninstall: conf
	\$(QUIET) \$(SUDOBASH) '\$(E3_MODULE_MAKE_CMDS) uninstall'
	\$(SUDO) find \$(E3_SITELIBS_PATH) -xtype l -delete 

## Build the EPICS Module : \$(E3_MODULE_NAME)
# Build always the Module with the EPICS_MODULES_TAG
build: conf checkout vlibs
	\$(QUIET) \$(E3_MODULE_MAKE_CMDS) build


## Clean, build, and install the EPICS Module : \$(E3_MODULE_NAME)
rebuild: clean build install


## Clean : \$(E3_MODULE_NAME)
clean: conf
	\$(QUIET) \$(E3_MODULE_MAKE_CMDS) clean


## Copy \$(E3_MODULE_MAKEFILE) into \$(E3_MODULE_SRC_PATH)
conf: 
	\$(QUIET) install -m 644 \$(TOP)/\$(E3_MODULE_MAKEFILE)  \$(E3_MODULE_SRC_PATH)/


.PHONY: init git-submodule-sync \$(E3_MODULE_SRC_PATH)  checkout

ifneq (,\$(findstring loc,\$(E3_MODULE_SRC_PATH)))
init: 
	\$(QUIET) echo ">> You are in the local source mode."
	\$(QUIET) echo ">> Nothing happens."

checkout:

else
## Initialize : \$(E3_MODULE_SRC_PATH) 
init: git-submodule-sync \$(E3_MODULE_SRC_PATH)  checkout


git-submodule-sync:
	\$(QUIET) git submodule sync


\$(E3_MODULE_SRC_PATH): 
	\$(QUIET) \$(git_update)


checkout: 
	cd \$(E3_MODULE_SRC_PATH) && git checkout \$(EPICS_MODULE_TAG)


endif

EOF

    cat > RULES_E3_SITELIBS <<EOF

# Create symbolic links in siteLibs
.PHONY: install_links \$(INSTALLED_EPICS_BASE_ARCHS)

# GNU fine is needed
install_links: \$(INSTALLED_EPICS_BASE_ARCHS) pv
	\$(SUDO) ln -snf \$(E3_MODULES_INSTALL_LOCATION_INC) \$(E3_MODULES_INSTALL_LOCATION_INC_LINK)
	\$(SUDO) ln -snf \$(E3_MODULES_INSTALL_LOCATION_DB)  \$(E3_MODULES_INSTALL_LOCATION_DB_LINK)
	\$(SUDO) ln -snf \$(E3_MODULES_INSTALL_LOCATION_BIN) \$(E3_MODULES_INSTALL_LOCATION_BIN_LINK)
	\$(SUDO) ln -snf \$(E3_MODULES_INSTALL_LOCATION_LIB) \$(E3_MODULES_INSTALL_LOCATION_LIB_LINK)
	\$(SUDO) ln -sf  \$(E3_MODULES_INSTALL_LOCATION_DBD) \$(E3_MODULES_INSTALL_LOCATION_DBD_LINK)
	\$(SUDO) find \$(E3_SITELIBS_PATH) -xtype l -delete 

\$(INSTALLED_EPICS_BASE_ARCHS):
	\$(SUDO) mkdir -p \$(E3_SITELIBS_PATH)/\$@
	\$(SUDO) ln -sf \$(E3_MODULES_INSTALL_LOCATION)/lib/\$@/\$(E3_MODULES_LIBNAME) \$(E3_SITELIBS_PATH)/\$@/\$(E3_MODULES_LIBLINKNAME)

EOF

    cat > RULES_DEV <<EOF
# -*- mode: Makefile;-*-

.PHONY: devvars devenv devinit devbuild devclean devinstall devrebuild devuninstall devdistclean devepics devepics-clean devpatch devpatchrevert

devvars: vars

devenv: devvars

devinit: git-submodule-sync
	git clone \$(E3_MODULE_DEV_GITURL) \$(E3_MODULE_SRC_PATH)
	cd \$(E3_MODULE_SRC_PATH) && git checkout \$(EPICS_MODULE_TAG)


ifeq "\$(INIT_E3_MODULE_SRC)" "1"

devbuild: nonexists
devclean: nonexists
devinstall: nonexists
devrebuild: nonexists
devuninstall: nonexists
devdistclean: nonexists
devepics: nonexists
devepics-clean: nonexists
devpatch: nonexists
devpatchrevert: nonexists
nonexists:
	\$(QUIET)echo ""
	\$(QUIET)echo "------------------------------------------------------------"
	\$(QUIET)echo "          Could not find \$(E3_MODULE_SRC_PATH) "
	\$(QUIET)echo "          Please make devinit first !          "
	\$(QUIET)echo "------------------------------------------------------------"
	\$(QUIET)echo ""
else

devbuild: build
devclean: clean
devinstall: install
devrebuild: rebuild
devuninstall: uninstall
devdistclean: clean
	\$(QUIET)echo "Removing \$(E3_MODULE_SRC_PATH) ......... "
	rm -rf \$(E3_MODULE_SRC_PATH)
devepics: epics
devepics-clean: epics-clean
devpatch: patch
devpatchrevert: patchrevert
endif


EOF

    ## module.makefile should have db: rule

    cat > RULES_DB <<EOF

## This RULE should be used in case of inflating DB files
## In this case, one should add db: rule in \$(EPICS_MODULE_NAME).makefile
## And add db in RULES_E3 also as follows:
## install_module: uninstall db
## install -m 644 \$(TOP)/template/cpci-evg230-ess.substitutions   \$(E3_MODULE_SRC_PATH)/evgMrmApp/Db/

.PHONY: db

###   ..... 

db: conf
	\$(QUIET) \$(E3_MODULE_MAKE_CMDS) db


EOF

    cat > RULES_VLIBS <<EOF

.PHONY: vlibs

vlibs: conf
	\$(QUIET) \$(E3_MODULE_MAKE_CMDS) vlibs

EOF

    cat > RULES_PV <<EOF
# don't like to do this, but without changing driver.Makefile heavily,
# it is only the way to do this. 
# We have to move all pv headers to its own include/pv directories
# 
pv:
#	\$(SUDO) install -m 755 -d \$(E3_MODULES_INSTALL_LOCATION_INC)/pv
#	cd \$(E3_MODULES_INSTALL_LOCATION_INC) && \$(SUDO) mv *.h pv/


.PHONY: pv


EOF


    
	
}


