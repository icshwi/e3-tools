#!/bin/bash
#
#  Copyright (c) 2018 - 2019 Jeong Han Lee
#  Copyright (c) 2018 - 2019 European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
#
#   author  : Jeong Han Lee
#   email   : jeonghan.lee@gmail.com
#   date    : Thursday, January 24 21:00:05 CET 2019
#   version : 0.0.1

EXIST=1
NON_EXIST=0


function pushd { builtin pushd "$@" > /dev/null; }
function popd  { builtin popd  "$@" > /dev/null; }

function die
{
    error=${1:-1}
    ## exits with 1 if error number not given
    shift
    [ -n "$*" ] &&
	printf "%s%s: %s\n" "$scriptname" ${version:+" ($version)"} "$*" >&2
    exit "$error"
}


## if [[ $(checkIfFile "${release_file}") -eq "$NON_EXIST" ]]; then
#   NON_EXIT
## fi

function checkIfFile
{
    local file=$1
    local result=""
    if [ ! -e "$file" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"	 
};




# Usage :
# e3_version="$(read_file_get_string  "${file_name}" "E3_VERSION:=")";
# It ignores the # character
# 
function read_file_get_string
{
    local FILENAME="$1"
    local PREFIX="$2"

    local val=""
    while IFS= read -r line; do
	if [ "$line" ]; then
	    [[ "$line" =~ ^#.*$ ]] && continue
	    if [[ "$line" =~ "${PREFIX}" ]] ; then
	     	val=${line#"${PREFIX}"}
	    fi
	fi
    done < ${FILENAME}
    echo "${val// }"

}




# Usage :
# e3_version="$(read_file_get_string  "${file_name}" "E3_VERSION:=")";
# It ignores the # character
# 
function read_file_get_string_debug
{
    local FILENAME="$1"
    local PREFIX="$2"

    local val=""
    while IFS= read -r line; do
	if [ "$line" ]; then
	    [[ "$line" =~ ^#.*$ ]] && continue
	    if [[ $line =~ "${PREFIX}" ]] ; then
	     	val=${line#"$PREFIX"}
	    fi
	fi
    done < ${FILENAME}

    echo "$val"
}



function yes_or_no_to_go
{

    printf  ">>\n";
    printf  "  You should aware what you are doing now ....\n";
    printf  "  If you are not sure, please stop this procedure immediately!\n";

#    print_options
    
    printf  "\n";
    read -p ">> Do you want to continue (y/N)? " answer
    case ${answer:0:1} in
	y|Y )
	    printf "\n"
	    ;;
	* )
            printf ">> Stop here. \n";
	    exit;
	    ;;
    esac

}




function usage
{
    {
	echo "";
	echo "Usage : $0 [-b <branch_name>] release" ;
	echo "";
	echo "            -b : default, ${DEFAULT_BRANCH}"
	echo "            -s : SHA-1 Hash"
	echo ""
	
    } 1>&2;
    exit 1; 
}


function print_options
{
    printf ">>\n"
    printf "  We've found your working environment as follows:\n";
    printf "  Working Branch      : %s\n" "${BRANCH}"
    printf "  Working TARGET_SRC  : %s\n" "${TARGET_SRC}"
    printf "  Working PATH        : %s\n" "${PWD}"
    printf ">>\n\n"
}


function read_version
{
    local version="";
    local input_file=$1; shift;
    local compare_string="$1"; shift;

    #   echo "Input File     : ${input_file}"
    #   echo "Compare String : ${compare_string}"
    version="$(read_file_get_string "${input_file}" "${compare_string}:=")";
    if [ -z "${version}" ]; then
       	version="$(read_file_get_string "${input_file}" "${compare_string}=")";
    	if [ -z "${version}" ]; then
       	    version="error"
       	fi
    fi
    echo "${version}"
}
